Докер – средство виртуализации процессов, а не систем. 
Важное правило – каждому процессу свой виртуальный контейнер.

Image (образ) – собранная подсистема, необходимая для работы 
процесса, сохраненная в образе.

Container (контейнер) – процесс, инициализированный на базе 
образа. То есть контейнер существует только когда запущен. 
Это как экземпляр класса, а образ это типа класс. 

Host (хост) – среда, в которой запускается докер. 
Проще говоря –  локальная машина.

Volume – это дисковое пространство между хостом и контейнером. 
Проще – это папка на  локальной машине примонтированная внутрь 
контейнера.

Dockerfile – файл с набором инструкций для создания образа 
будущего контейнера

Service (сервис) – по сути это запущенный образ (один или 
несколько контейнеров), дополнительно сконфигурированный т
акими опциями как открытие портов, маппинг папок (volume) 
и прочее. Обычно это делается при помощи 
docker-compose.yml файла.

Docker-compose (докер-композ, чаще композер, но не путать 
с php composer) – тулза, облегчающая сборку и запуск системы 
состоящей из нескольких контейнеров, связанных между собой.

Build (билд, билдить) – процесс создания образа из набора 
инструкций в докерфайле, или нескольких докерфайлов, если билд 
делается с помощью композера

Инструкции:
FROM – указывает с какого пакета/образа из хаба начать.
RUN – выполняет команду внутри образа.
ADD – берет файлы с хоста и кладет внутрь образа.

Пример:
FROM ubuntu:latest
MAINTAINER igor
RUN apt-get update
RUN apt-get install nginx
ADD ./nginx.conf /etc/nginx/
EXPOSE 80
CMD [nginx]

Как докер его билдит:

1. качаем образ ubuntu с тегом latest, сохраняем его с ID=aaa
2. берем образ aaa, прописываем ему maintainer=igor, сохраняем 
его с ID=aab
3. берем образ aab, запускаем контейнер и выполняем внутри 
команду “apt-get update”, останавливаем контейнер, получившийся 
в результате образ сохраняем с ID=aac
4. берем образ aaс, запускаем контейнер и выполняем внутри 
команду “apt-get install nginx”, останавливаем контейнер, 
получившийся в результате образ сохраняем с ID=aad
5. берем образ aad, запускаем контейнер и копируем файл 
./nginx.conf (путь указывается относительно папки в которой 
находится dockerfile) внутрь контейнера по пути /etc/nginx/, 
останавливаем контейнер, получившийся в результате образ 
сохраняем с ID=aae


Каждый следующий контейнер ничего не знает о том что там 
запускалось в предыдущем шаге, поэтому такие инструкции нужно 
объединять в одну через &&:

1. RUN source /app/env/bin/activate \
&& pip install 'something'

2. RUN service mongodb start \
&& RUN mongo db --eval 'db.createUser({user:"",...})'